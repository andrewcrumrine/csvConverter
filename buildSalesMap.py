"""
	Build Sales Order Map
	buildSalesMap.py

	This script reads the sales order csv generated by NetSuite and generates a
	map based off of customer id, transaction date and amount spent on the
	order.

"""

import fileReader as f
import stringMan as s

CLIP = 1

class SalesMap(object):
	"""
	Object that contains the full sales map with extra variables/methods.
	"""
	def __init__(self,filename):
		"""
	Initializes the filename, dictionary structure.
		"""
		self.filename = filename
		self.fid = None
		self.map = {}
		self.key = 'Internal ID'
		self.date = None
		self.customer = None
		self.amount = None

	def buildMap(self):
		"""
	Method handles building the map.  Returns map.
		"""
		self._openFile()
		while self.fid.reading:
			newLine = self.fid.getNextLine()
			if newLine is not None:
				newText = newLine.getText(CLIP)
				nsId = self._splitLine(newText)
				if nsId is not None:
					self._putInMap(nsId)

	def _openFile(self):
		"""
	Opens the file using TxtFileReader
		"""
		self.fid = f.TxtFileReader(self.filename)

	def _splitLine(self,newLine):
		"""
	Breaks line up into date, customer and amount components
		"""
		if self._checkForHeader(newLine):
			return None
		out = []
		for i in xrange(0,5):
			if i < 4:
				out.append(s.subStrByChar(newLine,'',','))
			else:
				out.append(newLine)
			newLine = newLine[len(out[-1]) + 1:]
		nsID = out[0]
		self.date = out[1]
		self.customer = out[3]
		self.amount = out[4]
		return nsID

	def _checkForHeader(self,textIn):
		"""
	Checks to make sure the line is not a header
		"""
		if textIn.find(self.key) != -1:
			return True
		return False

	def _putInMap(self,nsID):
		"""
	Adds found components to the map
		"""
		if not self.map.has_key(self.customer):
			self.map[self.customer] = {self.date : {self.amount : nsID } }
		elif not self.map[self.customer].has_key(self.date):
			self.map[self.customer][self.date] = { self.amount : nsID }
		elif not self.map[self.customer][self.date].has_key(self.amount):
			self.map[self.customer][self.date][self.amount] = nsID
		else:
			return

	def getMap(self):
		"""
	Returns the generated map
		"""
		return self.map

	def getID(self,customer,date,amount):
		"""
	Returns the id value associated with the customer, date and amount.
		"""
		idVal = None
		try:
			idVal = self.map[customer][date][amount]
		except KeyError:
			print "Could not find ID with " + customer + ' ' + \
				date + ' ' + amount
			idVal = ''
		return idVal